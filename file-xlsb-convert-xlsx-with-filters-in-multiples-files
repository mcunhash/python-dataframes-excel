#IMPORT BIBLIOTECAS E CARREGAMENTO DE VARIAVEL
from datetime import date
import pandas as pd
import openpyxl
import datetime as dt
date_today = date.today()
AnoMes = date_today.strftime('%Y-%m')
user = input("Digite o nome do seu usuario no windows: ")
arquivo = input("Digite o nome do arquivo: ")

#TRATAMENTO DE XLSB PARA XLSX
import win32com.client
excel = win32com.client.Dispatch("Excel.Application")
excel.DisplayAlerts = False
excel.Visible=False
doc = excel.Workbooks.Open('C:\\Users\\'+user+'\\Downloads\\'+arquivo+'')
doc.SaveAs(Filename='C:\\Users\\'+user+'\\Downloads\\'+AnoMes+'-Base.xlsx',FileFormat=51)
doc.Close()
excel.Quit()

#CARREGAMENTO DO ARQUIVO EM XLSX E REMOÇÃO DE ABAS ADICIONAIS
wb = openpyxl.load_workbook('C:\\Users\\'+user+'\\Downloads\\'+AnoMes+'-Base.xlsx')
wb.remove(wb['ABA 2'])
wb.remove(wb['ABA 3'])
wb.remove(wb['ABA 4'])
wb.remove(wb['ABA 5'])
wb.remove(wb['ABA 6'])
wb.remove(wb['ABA 7'])
wb.save('C:\\Users\\'+user+'\\Downloads\\'+AnoMes+'-Base.xlsx')




#CARREGAMENTO DE ARQUIVO XLSX EM VARIAVEIS DIFERENTES
wb = openpyxl.load_workbook('C:\\Users\\'+user+'\\Downloads\\'+AnoMes+'-Base.xlsx')
excel_file_1 = ('C:\\Users\\'+user+'\\Downloads\\'+AnoMes+'-Base.xlsx')
excel_file_2 = ('C:\\Users\\'+user+'\\Downloads\\'+AnoMes+'-Base.xlsx')
excel_file_3 = ('C:\\Users\\'+user+'\\Downloads\\'+AnoMes+'-Base.xlsx')
excel_file_4 = ('C:\\Users\\'+user+'\\Downloads\\'+AnoMes+'-Base.xlsx')

#DATAFRAMES PARA CARREGAR ARQUIVO XLSX
df1 = pd.read_excel(excel_file_1)
df2 = pd.read_excel(excel_file_2)
df3 = pd.read_excel(excel_file_3)
df4 = pd.read_excel(excel_file_4)


#DROP DE COLUNAS ESPECIFICAS
df1 = df1.drop(['column2','column3','column4','column5','column6','column7','column8','column9'
], axis = 1)
df2 = df2.drop(['column2','column3','column4','column5','column6','column7','column8','column9'
], axis = 1)
df3 = df3.drop(['column2','column3','column4','column5','column6','column7','column8','column9'
], axis = 1)
df4 = df4.drop(['column2','column3','column4','column5','column6','column7','column8','column9'
], axis = 1)

#FILTRO E TRATAMENTO PARA ARQUIVOS DE MIDIAS INDIVIDUAIS 

#APLICANDO MÚLTIPLOS FILTROS
#DATAFRAME 1 
f1 = df1["column name"].isin(["content1 text","content2 text"]) 
f2 = df1["column name"].isin(["content text"])
f3 = df1["column name"].isin([1])
f4 = df1["column name"].isin(["content1 text","content2 text","content3 text"])


#SALVANDO OS FILTROS NO DATAFRAME
df1[f1 & f2 & f3 & f4]

#DEFININDO A COLUNA DATA NO TIPO DATE, POIS O PADRÃO DO DATAFRAME É O DATA datetime64 ns 
df1['DATA'] = df1['DATA'].dt.date


#SALVANDO O DATAFRAME COM OS FILTROS E EXPORTANDO O ARQUIVO EM XLSX
df1[f1 & f2 & f3 & f4].to_excel('C:\\Users\\'+user+'\\Downloads\\df1.xlsx', encoding= 'utf-8', index = False)

#APLICANDO MÚLTIPLOS FILTROS
#DATAFRAME 2
f5 = df2["column name"].isin(["content1 text","content2 text"])  
f6 = df2["column name"].isin(["content text"])
f7 = df2["column name"].isin([1])
f8 = df2["column name"].isin(["content1 text","content2 text"])

#SALVANDO OS FILTROS NO DATAFRAME
df2[f5 & f6 & f7 & f8]

#DEFININDO A COLUNA DATA NO TIPO DATE, POIS O PADRÃO DO DATAFRAME É O DATA datetime64 ns 
df2['DATA'] = df2['DATA'].dt.date



#SALVANDO O DATAFRAME COM OS FILTROS E EXPORTANDO O ARQUIVO EM XLSX
df2[f5 & f6 & f7 & f8].to_excel('C:\\Users\\'+user+'\\Downloads\\df2.xlsx', encoding= 'utf-8', index = False)

#APLICANDO MÚLTIPLOS FILTROS
#DATAFRAME 3
f9 = df3["column name"].isin(["column name"]) 
f10 = df3["column name"].isin(["column name"])
f11 = df3["column name"].isin([1])
f12 = df3["column name"].isin(["content1 text","content2 text"])

#SALVANDO OS FILTROS NO DATAFRAME
df3[f9 & f10 & f11 & f12]

#DEFININDO A COLUNA DATA NO TIPO DATE, POIS O PADRÃO DO DATAFRAME É O DATA datetime64 ns 
df3['DATA'] = df3['DATA'].dt.date


#SALVANDO O DATAFRAME COM OS FILTROS E EXPORTANDO O ARQUIVO EM XLSX
df3[f9 & f10 & f11 & f12].to_excel('C:\\Users\\'+user+'\\Downloads\\df3.xlsx', encoding= 'utf-8', index = False)

#APLICANDO MÚLTIPLOS FILTROS
DATAFRAME 4
f13 = df4["column name"].isin(["content1 text","content2 text"]) 
f14 = df4["column name"].isin(["content text"])
f15 = df4["column name"].isin([1])
f16 = df4["column name"].isin(["content text"])

#SALVANDO OS FILTROS NO DATAFRAME
df4[f13 & f14 & f15 & f16]

#DEFININDO A COLUNA DATA NO TIPO DATE, POIS O PADRÃO DO DATAFRAME É O DATA datetime64 ns 
df4['DATA'] = df4['DATA'].dt.date


#SALVANDO O DATAFRAME COM OS FILTROS E EXPORTANDO O ARQUIVO EM XLSX
df3[f13 & f14 & f15 & f16].to_excel('C:\\Users\\'+user+'\\Downloads\\df4.xlsx', encoding= 'utf-8', index = False)
